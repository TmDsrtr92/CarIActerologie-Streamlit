[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cariacterologie"
version = "2.1.0"
description = "AI-powered characterology assistant based on René Le Senne's work"
authors = [
    {name = "CarIActérologie Team"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.venv
    | \.tox
    | build
    | dist
    | __pycache__
    | archives
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "archives/*",
    ".venv/*",
    "build/*",
    "dist/*"
]

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "F401",  # imported but unused (handled by isort/mypy)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".tox",
    "build",
    "dist",
    "archives"
]
per-file-ignores = [
    "__init__.py:F401"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = false  # Gradually enable
check_untyped_defs = true
disallow_untyped_decorators = false  # Gradually enable
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "archives/",
    ".venv/",
    "build/",
    "dist/"
]

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "langchain.*",
    "langchain_core.*",
    "langchain_openai.*",
    "langchain_community.*",
    "langgraph.*",
    "chromadb.*",
    "tiktoken.*",
    "langfuse.*",
    "PyPDF2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--color=yes",
    "--durations=10",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "memory: Memory system tests",
    "config: Configuration tests",
    "qa: QA chain tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:config.settings",
    "ignore::DeprecationWarning:config.welcome_config",
    "ignore::UserWarning:streamlit",
    "ignore::LangChainDeprecationWarning",
]

[tool.coverage.run]
source = ["config", "core", "utils"]
omit = [
    "tests/*",
    "archives/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]